# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: Integration
on:
  pull_request:
    branches: [main]
    paths-ignore:
      - .gitignore
      - .github/**
      - "!.github/workflows/integration.yml"
      - .husky/**
      - .idea/**
      - .vscode/**
      - "**.md"
      - "**.rst"
  push:
    branches: [main]
    paths-ignore:
      - .gitignore
      - .github/**
      - "!.github/workflows/integration.yml"
      - .husky/**
      - .idea/**
      - .vscode/**
      - "**.md"
      - "**.rst"
  workflow_dispatch:
    inputs:
      jobs:
        description: Comma-separated list of names of jobs to trigger
        required: false
        default: build

env:
  ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
  ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
  AUTH_GITHUB_ID: ${{ secrets.AUTH_GITHUB_ID }}
  AUTH_GITHUB_SECRET: ${{ secrets.AUTH_GITHUB_SECRET }}
  AUTH_GOOGLE_ID: ${{ secrets.AUTH_GOOGLE_ID }}
  AUTH_GOOGLE_SECRET: ${{ secrets.AUTH_GOOGLE_SECRET }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NEXT_PUBLIC_GTM_ID: ${{ secrets.NEXT_PUBLIC_GTM_ID }}
  POSTGRES_DB: ${{ vars.POSTGRES_DB }}
  POSTGRES_USER: ${{ vars.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SHA: ${{ github.sha }}
  SMTP_USER: ${{ secrets.SMTP_USER }}
  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

jobs:
  changed-files:
    name: Get changed files
    runs-on: ubuntu-latest
    outputs:
      added-files: ${{ steps.changed-files.outputs.added_files }}
      deleted-files: ${{ steps.changed-files.outputs.deleted_files }}
      modified-files: ${{ steps.changed-files.outputs.modified_files }}
      all-changed-files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44.5.2

  generate-dotenv:
    name: Generate .env file
    needs: [changed-files]
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.generate-dotenv.outputs.cache-key }}
    steps:
      - name: Check out main branch
        uses: actions/checkout@v4
      - id: generate-dotenv
        name: Generate .env file
        uses: jacobjove/generate-dotenv@v0.3.7
        with:
          output-path: .env
          template-paths: |
            .config/_.env
            .config/_.env.production
          cache: true
          upload: true
          key: dotenv-${{ github.sha }}-${{ github.run_id }}
          allow-missing-vars: true
        env:
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          AUTH_GITHUB_ID: ${{ secrets.AUTH_GITHUB_ID }}
          AUTH_GITHUB_SECRET: ${{ secrets.AUTH_GITHUB_SECRET }}
          AUTH_GOOGLE_ID: ${{ secrets.AUTH_GOOGLE_ID }}
          AUTH_GOOGLE_SECRET: ${{ secrets.AUTH_GOOGLE_SECRET }}
          NEXT_PUBLIC_GTM_ID: ${{ secrets.NEXT_PUBLIC_GTM_ID }}
          PORT: ${{ vars.PORT }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

  test:
    name: Build and test
    needs: [changed-files, generate-dotenv]
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: pnpm/action-setup@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install
      - id: generate-dotenv
        name: Generate .env file
        uses: jacobjove/generate-dotenv@v0.3.7
        with:
          output-path: .env
          template-paths: |
            .config/_.env
            .config/_.env.production
      - name: Build
        run: pnpm build
        env:
          SENTRY_DRY_RUN: "true"
      - name: Test
        run: pnpm test

  docker:
    name: Build and push image
    if: ${{ github.actor != 'dependabot[bot]' }}
    needs: [changed-files, generate-dotenv]
    runs-on: ubuntu-latest
    steps:
      - name: Check out main branch
        uses: actions/checkout@v4
      - id: generate-dotenv
        name: Generate .env file
        uses: jacobjove/generate-dotenv@v0.3.7
        with:
          output-path: .env
          template-paths: |
            .config/_.env
            .config/_.env.production
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image with cache
        id: build_with_cache
        # https://github.com/docker/build-push-action
        uses: docker/build-push-action@v6
        with:
          build-args: |
            PORT=${{ vars.PORT }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,scope=jacobjove,mode=max
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/jacobjove/jacobjove:${{ github.sha }},ghcr.io/jacobjove/jacobjove:latest
      - name: Build image without cache
        if: ${{ failure() && steps.build_with_cache.outcome == 'failure' }}
        uses: docker/build-push-action@v6
        with:
          build-args: |
            PORT=${{ vars.PORT }}
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,scope=jacobjove,mode=max
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/jacobjove/jacobjove:${{ github.sha }}
      - name: Run containers
        run: |
          docker compose pull;
          docker compose up -d --no-build --wait || {
            docker compose logs front;
            docker compose ps;
            exit 1;
          }
