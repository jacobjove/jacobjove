# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: Delivery
on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SHA: ${{ github.sha }}
  SMTP_USER: ${{ secrets.SMTP_USER }}
  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

jobs:
  check:
    name: Check conditions
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.check_branch.outputs.branch }}
      tag: ${{ steps.check_tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get branch
        id: check_branch
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          branch=${raw##*/}
          echo "branch=${branch}" >> "$GITHUB_OUTPUT"
          echo "Branch: ${branch}"
      - name: Get tag
        id: check_tag
        run: |
          tag=${GITHUB_REF#refs/*/}
          echo "tag=${tag}" >> "$GITHUB_OUTPUT"
          echo "Tag: ${tag}"

  changed-files:
    name: Get changed files
    needs: [check]
    if: ${{ needs.check.outputs.branch == 'main' }}
    outputs:
      added-files: ${{ steps.changed-files.outputs.added_files }}
      deleted-files: ${{ steps.changed-files.outputs.deleted_files }}
      modified-files: ${{ steps.changed-files.outputs.modified_files }}
      all-changed-files: ${{ steps.changed-files.outputs.all_changed_files }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44.5.2

  create-dotenv:
    name: Generate .env file
    needs: [check]
    if: ${{ needs.check.outputs.branch == 'main' }}
    env:
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      AUTH_GITHUB_ID: ${{ secrets.AUTH_GITHUB_ID }}
      AUTH_GITHUB_SECRET: ${{ secrets.AUTH_GITHUB_SECRET }}
      AUTH_GOOGLE_ID: ${{ secrets.AUTH_GOOGLE_ID }}
      AUTH_GOOGLE_SECRET: ${{ secrets.AUTH_GOOGLE_SECRET }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      NEXT_PUBLIC_GTM_ID: ${{ secrets.NEXT_PUBLIC_GTM_ID }}
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Check out main branch
        uses: actions/checkout@v4
      - name: Generate dotenv file
        id: generate-dotenv
        # https://github.com/jacobjove/generate-dotenv
        uses: jacobjove/generate-dotenv@v0.3.7
        with:
          template-paths: |
            .config/_.env
            .config/_.env.production
          output-path: .env
          cache: true
          upload: true
          key: dotenv-${{ github.sha }}-${{ github.run_id }}
          allow-missing-vars: true

  deploy:
    name: Deploy
    needs: [changed-files]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Check out main branch
        uses: actions/checkout@v4
      - name: Restore dotenv
        uses: actions/download-artifact@v4
        with:
          name: dotenv-${{ github.sha }}-${{ github.run_id }}
      - name: Read dotenv file
        id: dotenv
        uses: falti/dotenv-action@v1.1.2
        with:
          path: .env
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        id: build_with_cache
        # https://github.com/docker/build-push-action
        uses: docker/build-push-action@v6
        with:
          build-args: |
            PORT=${{ steps.dotenv.outputs.port }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/jacobjove/jacobjove:${{ github.sha }},ghcr.io/jacobjove/jacobjove:latest
      # - name: Build image without cache
      #   if: ${{ failure() && steps.build_with_cache.outcome == 'failure' }}
      #   # https://github.com/docker/build-push-action
      #   uses: docker/build-push-action@v6
      #   with:
      #     build-args: |
      #       PORT=${{ steps.dotenv.outputs.port }}
      #     builder: ${{ steps.buildx.outputs.name }}
      #     context: .
      #     file: Dockerfile
      #     no-cache: true
      #     push: true
      #     platforms: linux/amd64,linux/arm64
      #     tags: ghcr.io/jacobjove/jacobjove:${{ github.sha }},ghcr.io/jacobjove/jacobjove:latest
      - name: Deploy to server
        uses: jacobjove/deploy-docker-ssh@v0.5.1
        with:
          host: kfred.duckdns.org
          user: jacob
          source-dir: .
          target-dir: /var/www/${{ steps.dotenv.outputs.domain }}
          files: |
            .env
            docker-compose.yml
            .config
            scripts
          ssh-port: ${{ secrets.SSH_PORT }}
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_TOWER }}
          command: python3 scripts/deploy.py jacobjove --sha latest --token ${{ secrets.GITHUB_TOKEN }}
        env:
          RELOAD_WEBSERVER: ${{ contains(needs.changed-files.outputs.modified-files, 'nginx.conf') }}
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
